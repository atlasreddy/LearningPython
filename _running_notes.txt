print("Welcome to Python classes")

# print("network", "classes", "python", 2, 5, 2.5,   sep="abcsd")

print("this will be executed") # this is a comment
# this is another comment


print("""
this is not a comment
fhjsdahfjksa
# this is not a comment

""")


x = 5
y = 8

print("The sum of x and y is ", x+y)

# should start with character or _
# $x = 100
# x$ = 20
# 2x = 30
x2 = 56
_d = 89
print(_d)

string = "this is a string"
print(string)


price = 9.99
discount = 0.2
result = price * (1-discount)

print(result)


object
	Identity
	Value
	Type

age = "12.25"

print(type(age))
print(id(age))

type_ = 56
print(type_)
type(age)


a = 0b10 # 0B10
print(a)

b = 0O70
print(b)

c = 0Xa1
print(c)


a = 15
print(bin(a))
print(oct(a))
print(hex(a))

b = 0b1011
print(hex(b))
print(type(b))

a = 0B101.10
print(a)


f = 1.2e3
print(f)

g = 1.23
print(g)

print(int(g))
e = 5
print(float(e))

print(str(e))
d = 0Xa
print(float(d))
print(str(d))



d = 134
e = str(d)
print(type(e))

q = "q"
# q = "3"
w = int(q)
print(w)


s1 = "network"
s2 = "classes"

print(s1 + s2)
print(s1 * 5)
print(s1 * s2)


s1 = "net work"
# Slicing operation in the string.

print(s1[0])
print(s1[3])


input
b = int(input("Enter second number: "))
expression
operator operand

# Arithmetic Operators
# +, -, *, /, %, //, **, ()


# Relational Operators
# >, <, >=, <=, ==, !=, [equality, not equal]

print(4/3*2**3)
expression evaluation order of precedence


# Relational Operators
# <, >, >=, <=, ==, !=

# Logical Operators
# and, or, not

# 2> 3 and 3>5
print(8>3 and 3>5 and 8 > 12)
#True and True ==> True

#False and False ==> False
#False and True ==> False
# True and False ==> False

print(8 > 3 or 5 <2)
# True or False ==> True
# False or False ==> False


print(8 > 3 or 5 <2 and 8 > 12) # True (and, or)

print(not 10)
# 0, ""  True

print(not 0)
print(not 8>3)
print(bool(0))
print(bool(""))
print(bool(False))


# Ternary/Conditional Operator
# syntax: a = firstValue if condition_true else secondValue

a = 2 if 2 > 1 else 1

print(a)

a = 2 if 2 < 1 else 1
print(a)

a = 2 if 2 < 1 else (1 if 3 < 2 else 5)
print(a)

# Small Program to find the minimum of the two values taken from the user.
# syntax: a = firstValue if condition_true else secondValue

first_value = int(input("Enter first value"))
second_value = int(input("Enter second value"))

output = first_value if first_value < second_value else second_value
print(f"The minimum of two numbers {first_value} and {second_value} is {output}")


# Small Program to find the minimum of the three values taken from the user.
# syntax: a = firstValue if condition_true else secondValue

first_value = int(input("Enter first value"))
second_value = int(input("Enter second value"))
third_value = int(input("Enter third value"))

output = first_value if first_value < second_value and first_value < third_value  else (second_value if second_value < third_value else third_value)
print(f"The minimum of three numbers {first_value}, {second_value}, {third_value} is {output}")

# Small Program to find the maximum of the three values taken from the user.

# syntax: a = firstValue if condition_true else secondValue
# Write a program to find whether the input number is even/odd
# syntax: a = firstValue if condition_true else secondValue

num = int(input("Enter the number: \n"))
rem = num % 2
output = "even" if rem == 0 else "odd"
print(output)



# Identity Operator
# is, is not

a = 25
b = 25

print(a is b)

print(id(a))
print(id(b))

c = 56
print(id(c))
print(c is a)

print(c is not a)

# ==, is


# Membership Operators
# in, not in

d = "python"

print("a" in d) # False
print("p" in d) # True
print("y" not in d) # False

print( str(1) in str(10))


# Conditional Statements
# if, if - else, if - elif, if - elif - else

'''
if condition:
    statement1
    statement2
elif condition2:
    statement1
    statement2
elif condition3:
    statement1
    statement2
else:
    default_statement
'''

# Write a program to find whether the given number is in particular range. [0 to 100]

num = int(input("Enter the number"))

if num >= 0 and num <=100:
    print("Number lies with in the given range")
else:
    print("Enter the correct number")


num = int(input("Enter the number"))

if num >= 0 and num <=100:
    print("Number lies with in the given range")
    else:
        print("INvalid")
else:
    print("Enter the correct number")
    if num >0:
        print("Number less than 100")


# Write a program to find whether the vowel is present in the given string.

string = input("Enter the string: ")

if 'a' in string or 'e' in string or 'i' in string or 'o' in string or 'u' in string:
    print("Vowel is present ")
else:
    print("Vowel is not present")

# Write a program to take the single digit number from the keyboard and print its value in the form of English word.

0 - ZERO
100 - Enter number with in the range



s = "abcd"

d = "abcd"

e = d[:]

print(s is d) # True

print(s is e) # True

# write a program to take an input numbner from the user and increment it by 20

num = int(input("Enter the number"))

print(num+20)

inc = num+20

# num = num+20

# print(num)

num += 20
# -= , *=, /=
print(num)

d = "abd"
e = "python"

d += e
print(d)

# swapping of two variables
a,b = 1,5
print(a)
print(b)

a,b = b,a
print(a,b)


a,b = "ajsh",5
print(a)
print(b)

a,b = b,a
print(a,b)

# Evaluation of the expression
exp = input("Enter the expression")

# eval(exp)
print(eval(exp))

# To find out whether the given sides of a triangle is valid or not

a = int(input("Enter the first side"))
b = int(input("Enter the second side"))
c = int(input("Enter the third side"))

if (a+b > c) and (b+c > a) and (c+a > b):
    print("The given sides form a valid triangle")
else:
    print("Invalid Triangle")

# 3,4,5


# Program to check whether a character is alphabet or not
char = input("Enter the character")
if len(char) == 1:
    print(ord(char))
    if (ord(char) >= 65 and ord(char) <= 90) or (97 <= ord(char) <= 122):
        print("char is alphabet")

    if char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
        print("char is alphabet....")
    # a -> 97
    # z -> 122
    # A -> 65
    # Z -> 90
# 2016
# year == 2022:
# 1947 <= year <= 2050:



Assignment: Electricity Bill calculation.
Input: previous reading, current reading
Output: number of units consumed, consumer charge, consumption charge, Total Bill.

[0-100]
0-50 -- 1.95/unit. consumer = 50
51-100 -- 3.10/unit. consummer = 80
[101-200]
0-100 -- 3.40/unit. consumer = 100
101-200 -- 4.80/unit. consumer = 100
[201, +++]
0-200  5.10/unit.   consumer = 110
201-300 7.70/unit.  consumer = 110
301-400 9.00/unit.  consumer = 130
401-800 9.50/unit.   consumer = 150
> 800   10/unit.     consumer = 170
total charge = units consumption charge + consumer charge
minimum total charge is 125

----------------------------

# list

#

vehicles = ["car", "bike", "bus", 10, 1.2, False]
print(vehicles)

print(type(vehicles))
print(vehicles[0])
print(vehicles[-1])

print(type(vehicles[0]))

new_vehicle = input("Enter the new vehicle: ")
vehicles.append(new_vehicle)
vehicles.append(new_vehicle)
vehicles.append(456)
vehicles.append(new_vehicle)

print(vehicles)
vehicles.insert(0, "inserted_vehicle")
print(vehicles)
print(vehicles[0]) # "inserted_vehicle"
vehicles.remove(1.2)
print(vehicles)

vehicles.remove(new_vehicle)
print(vehicles)

result = vehicles.pop()

print(vehicles)
print(result)

del vehicles[2]
print(vehicles)

del vehicles[2:5]
print(vehicles)

del result
print(result)



numbers = [1,5,2,6,1.3,4.5,8.6, 3.7]

print(numbers)
print(numbers[4])
# numbers.sort(reverse=True)
# numbers.sort() # permanently sort the list.
# print(sorted(numbers)) # temporarily sort the list
print(sorted(numbers, reverse=True))
print(numbers)
print(numbers[4])


numbers = [1,5,2,6,1.3,4.5,8.6, 3.7]

print(numbers)

# numbers.reverse()
# print(list(reversed(numbers)))
print(numbers)
print(len(numbers))

# list(value) # type cast the values to list
# print(numbers[10])

numbers[1] = "modified"

print(numbers)

string1 = "hello"

print(string1)
string1[0] = "H"

print(string1)


# empty_list = [], list()

####################
vehicles = ["car", "bike", "bus", 10, 1.2, False]
vehicle = 466
print(vehicle)
vehicle = 999
print(vehicle)

for vehicle in vehicles:
    print(vehicle, end="\t")
    # del vehicle
print(type(vehicle), end="\b")
print(123)

'''
for item in list_of_items:
    print(item)
'''




for num in range(15):
    print(num)
# range(n) --> 0 to n-1

for num in range(5, 20):
    print(num)
# range(start, stop) --> start to stop-1, step=1[default]
print("*"*30)
# range(start, stop, step) --> end value: stop-1
for num in range(0, 20, 2):
    print(num)
print("*"*30)
for i in range(-1, -20, -1):
    print(i)

print("*"*30)

for i in range(0, 20, -1):
    print(i)
# start, start+step, and so on.
'''
for i in 456:
   print(i)
'''


# generate a list of squares of natural numbers upto 25.

squares = []
for num in range(1, 26,1):
    square = num * num
    # square = num**2
    squares.append(square)
print(squares)

# print the list of characters in the string.
string1 = "python class"

chars = []
for char in string1:
    # print(char)
    chars.append(char)
print(chars)

#
print(list(string1))

# generate a list of squares of natural numbers upto 25.

squares = []
for num in range(1, 26,1):
    square = num * num
    # square = num**2
    squares.append(square)
print(squares)

# print the list of characters in the string.
string1 = "python class"

chars = []
for char in string1:
    # print(char)
    chars.append(char)
print(chars)

#
print(list(string1))

###############################


numbers = [0,1,2,3,4,5,6]

print(sum(numbers) / len(numbers))
print(min(numbers))
print(max(numbers))


numbers = [0,1,2,3,4,5,6]
# numbers = ["python", "classes"]
print(sum(numbers))
print(min(numbers))
print(max(numbers))

# program to take the sequence of numbers from the user and print their sum, minimum, maximum

numbers = (input("Enter the numbers: ").split(","))
print(numbers, type(numbers))

numbers_float = []
own_sum = 0
for number in numbers:
    own_sum += float(number)
    numbers_float.append(float(number))

print(sum(numbers_float))
print(own_sum)
print(min(numbers_float))
print(max(numbers_float))


# input("Enter the numbers: ") # str
#s.split(",") # list

strings = ["python", "classes", "complete", 45]
new_string = " fasdjkhfkjasd ".join(strings)
print(new_string, type(new_string))

###################

num1,num2,num3 = input("Enter the number").split(",")
num1 = 1234
num1_str = str(num1)
int(num1_str[0])


# List comprehension

# generate the squares of natural numbers, from 1 to 25

squares = []
for num in range(1,26):
    squares.append(num**2)
print(squares)


s2 = [num**2 for num in range(1,26)]

print(s2)

# List comprehension

num1,num2,num3 = [int(x) for x in input("Enter the number").split(",")]
print(num1, num2, num3, type(num1))


list1 = [1,2,37,56]
print(list1)
list1[0] = "r"
print(list1)

# tuple.

tuple1 = (1,2,37,56)
print(tuple1, type(tuple1))

#tuple1[0] = "r"
# print(tuple1)
# del tuple1[:]
# print(tuple1)
del tuple1
# print(tuple1)

string1 = "python"
string1[0] = "P"

print(string1)


# id()

list1 = [1,2,37,56]
list2 = list1[:]
list3 = list1
print(list1, id(list1))
print(list2, id(list2))
print(list3, id(list3))
'''
print(id(list1) == id(list3))
list1.append(78)
print(list1) # [1,2,37,56,78]
print(list2) # [1,2,37,56]
print(list3) # [1,2,37,56,78] [1,2,37,56]


list3.remove(2)
print(list1) # [1,37,56,78]
print(list2) # [1,2,37,56]
print(list3) # [1,37,56,78] [1,2,37,56]
'''

print(list1 is list3) # True
print(list1 == list3) # True
print(list1 == list2) # True
print(list1 is list2) # False

# var1 is var2, id(var1) == id(var2)

int1_ = 1,2,3
print(int1_, type(int1_))

var1 = 2,3, # valid tuple.
print(var1, type(var1))

var2 = 56, # valid
print(var2, type(var2))

print(len(var2))

#############################

# help(enumerate)
#
string = "Python class"

for char in string:
    print(char, end="\t")

print()

for index, char in enumerate(string):
    print(index, char)


list_of_values = [1,5,6,"python", 1.2, True, 89]
for i, value in enumerate(list_of_values):
    print(f"The value at the index {i} in the list is {value}")

for val in enumerate(list_of_values):
    print(val, type(val))
    print(f"The value at the index {val[0]} in the list is {val[1]}")


# input the number from the user,

number = int(input("Enter the number"))
'''
while condition_is_true:
    loop_body


for x in sequence:
    loop_body
'''

while number != 10:
    number = int(input("Enter the number"))

print("You've entered the desired number")


# input the number from the user, print the natural numbers upto the entered number.

number = int(input("Enter the number"))
'''
while condition_is_true:
    loop_body


for x in sequence:
    loop_body
'''

x = 1
while x <= number:
    print(x)
    x += 1
print("ended the program")

while x <= number:
    print(x)

while True:
    print("Hello" )
# Ctrl + C to interrupt the execution.

#####################################
