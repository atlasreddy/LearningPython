print("Welcome to Python classes")

https://github.com/adullaharishad/Learning_Python
https://github.com/divyathejagangam/ASSIGNMENTS
https://github.com/Shashankdumpala/pythonlearning

# print("network", "classes", "python", 2, 5, 2.5,   sep="abcsd")

print("this will be executed") # this is a comment
# this is another comment


print("""
this is not a comment
fhjsdahfjksa
# this is not a comment

""")


x = 5
y = 8

print("The sum of x and y is ", x+y)

# should start with character or _
# $x = 100
# x$ = 20
# 2x = 30
x2 = 56
_d = 89
print(_d)

string = "this is a string"
print(string)


price = 9.99
discount = 0.2
result = price * (1-discount)

print(result)


object
	Identity
	Value
	Type

age = "12.25"

print(type(age))
print(id(age))

type_ = 56
print(type_)
type(age)


a = 0b10 # 0B10
print(a)

b = 0O70
print(b)

c = 0Xa1
print(c)


a = 15
print(bin(a))
print(oct(a))
print(hex(a))

b = 0b1011
print(hex(b))
print(type(b))

a = 0B101.10
print(a)


f = 1.2e3
print(f)

g = 1.23
print(g)

print(int(g))
e = 5
print(float(e))

print(str(e))
d = 0Xa
print(float(d))
print(str(d))



d = 134
e = str(d)
print(type(e))

q = "q"
# q = "3"
w = int(q)
print(w)


s1 = "network"
s2 = "classes"

print(s1 + s2)
print(s1 * 5)
print(s1 * s2)


s1 = "net work"
# Slicing operation in the string.

print(s1[0])
print(s1[3])


input
b = int(input("Enter second number: "))
expression
operator operand

# Arithmetic Operators
# +, -, *, /, %, //, **, ()


# Relational Operators
# >, <, >=, <=, ==, !=, [equality, not equal]

print(4/3*2**3)
expression evaluation order of precedence


# Relational Operators
# <, >, >=, <=, ==, !=

# Logical Operators
# and, or, not

# 2> 3 and 3>5
print(8>3 and 3>5 and 8 > 12)
#True and True ==> True

#False and False ==> False
#False and True ==> False
# True and False ==> False

print(8 > 3 or 5 <2)
# True or False ==> True
# False or False ==> False


print(8 > 3 or 5 <2 and 8 > 12) # True (and, or)

print(not 10)
# 0, ""  True

print(not 0)
print(not 8>3)
print(bool(0))
print(bool(""))
print(bool(False))


# Ternary/Conditional Operator
# syntax: a = firstValue if condition_true else secondValue

a = 2 if 2 > 1 else 1

print(a)

a = 2 if 2 < 1 else 1
print(a)

a = 2 if 2 < 1 else (1 if 3 < 2 else 5)
print(a)

# Small Program to find the minimum of the two values taken from the user.
# syntax: a = firstValue if condition_true else secondValue

first_value = int(input("Enter first value"))
second_value = int(input("Enter second value"))

output = first_value if first_value < second_value else second_value
print(f"The minimum of two numbers {first_value} and {second_value} is {output}")


# Small Program to find the minimum of the three values taken from the user.
# syntax: a = firstValue if condition_true else secondValue

first_value = int(input("Enter first value"))
second_value = int(input("Enter second value"))
third_value = int(input("Enter third value"))

output = first_value if first_value < second_value and first_value < third_value  else (second_value if second_value < third_value else third_value)
print(f"The minimum of three numbers {first_value}, {second_value}, {third_value} is {output}")

# Small Program to find the maximum of the three values taken from the user.

# syntax: a = firstValue if condition_true else secondValue
# Write a program to find whether the input number is even/odd
# syntax: a = firstValue if condition_true else secondValue

num = int(input("Enter the number: \n"))
rem = num % 2
output = "even" if rem == 0 else "odd"
print(output)



# Identity Operator
# is, is not

a = 25
b = 25

print(a is b)

print(id(a))
print(id(b))

c = 56
print(id(c))
print(c is a)

print(c is not a)

# ==, is


# Membership Operators
# in, not in

d = "python"

print("a" in d) # False
print("p" in d) # True
print("y" not in d) # False

print( str(1) in str(10))


# Conditional Statements
# if, if - else, if - elif, if - elif - else

'''
if condition:
    statement1
    statement2
elif condition2:
    statement1
    statement2
elif condition3:
    statement1
    statement2
else:
    default_statement
'''

# Write a program to find whether the given number is in particular range. [0 to 100]

num = int(input("Enter the number"))

if num >= 0 and num <=100:
    print("Number lies with in the given range")
else:
    print("Enter the correct number")


num = int(input("Enter the number"))

if num >= 0 and num <=100:
    print("Number lies with in the given range")
    else:
        print("INvalid")
else:
    print("Enter the correct number")
    if num >0:
        print("Number less than 100")


# Write a program to find whether the vowel is present in the given string.

string = input("Enter the string: ")

if 'a' in string or 'e' in string or 'i' in string or 'o' in string or 'u' in string:
    print("Vowel is present ")
else:
    print("Vowel is not present")

# Write a program to take the single digit number from the keyboard and print its value in the form of English word.

0 - ZERO
100 - Enter number with in the range



s = "abcd"

d = "abcd"

e = d[:]

print(s is d) # True

print(s is e) # True

# write a program to take an input numbner from the user and increment it by 20

num = int(input("Enter the number"))

print(num+20)

inc = num+20

# num = num+20

# print(num)

num += 20
# -= , *=, /=
print(num)

d = "abd"
e = "python"

d += e
print(d)

# swapping of two variables
a,b = 1,5
print(a)
print(b)

a,b = b,a
print(a,b)


a,b = "ajsh",5
print(a)
print(b)

a,b = b,a
print(a,b)

# Evaluation of the expression
exp = input("Enter the expression")

# eval(exp)
print(eval(exp))

# To find out whether the given sides of a triangle is valid or not

a = int(input("Enter the first side"))
b = int(input("Enter the second side"))
c = int(input("Enter the third side"))

if (a+b > c) and (b+c > a) and (c+a > b):
    print("The given sides form a valid triangle")
else:
    print("Invalid Triangle")

# 3,4,5


# Program to check whether a character is alphabet or not
char = input("Enter the character")
if len(char) == 1:
    print(ord(char))
    if (ord(char) >= 65 and ord(char) <= 90) or (97 <= ord(char) <= 122):
        print("char is alphabet")

    if char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
        print("char is alphabet....")
    # a -> 97
    # z -> 122
    # A -> 65
    # Z -> 90
# 2016
# year == 2022:
# 1947 <= year <= 2050:



Assignment: Electricity Bill calculation.
Input: previous reading, current reading
Output: number of units consumed, consumer charge, consumption charge, Total Bill.

[0-100]
0-50 -- 1.95/unit. consumer = 50
51-100 -- 3.10/unit. consummer = 80
[101-200]
0-100 -- 3.40/unit. consumer = 100
101-200 -- 4.80/unit. consumer = 100
[201, +++]
0-200  5.10/unit.   consumer = 110
201-300 7.70/unit.  consumer = 110
301-400 9.00/unit.  consumer = 130
401-800 9.50/unit.   consumer = 150
> 800   10/unit.     consumer = 170
total charge = units consumption charge + consumer charge
minimum total charge is 125

----------------------------

# list

#

vehicles = ["car", "bike", "bus", 10, 1.2, False]
print(vehicles)

print(type(vehicles))
print(vehicles[0])
print(vehicles[-1])

print(type(vehicles[0]))

new_vehicle = input("Enter the new vehicle: ")
vehicles.append(new_vehicle)
vehicles.append(new_vehicle)
vehicles.append(456)
vehicles.append(new_vehicle)

print(vehicles)
vehicles.insert(0, "inserted_vehicle")
print(vehicles)
print(vehicles[0]) # "inserted_vehicle"
vehicles.remove(1.2)
print(vehicles)

vehicles.remove(new_vehicle)
print(vehicles)

result = vehicles.pop()

print(vehicles)
print(result)

del vehicles[2]
print(vehicles)

del vehicles[2:5]
print(vehicles)

del result
print(result)



numbers = [1,5,2,6,1.3,4.5,8.6, 3.7]

print(numbers)
print(numbers[4])
# numbers.sort(reverse=True)
# numbers.sort() # permanently sort the list.
# print(sorted(numbers)) # temporarily sort the list
print(sorted(numbers, reverse=True))
print(numbers)
print(numbers[4])


numbers = [1,5,2,6,1.3,4.5,8.6, 3.7]

print(numbers)

# numbers.reverse()
# print(list(reversed(numbers)))
print(numbers)
print(len(numbers))

# list(value) # type cast the values to list
# print(numbers[10])

numbers[1] = "modified"

print(numbers)

string1 = "hello"

print(string1)
string1[0] = "H"

print(string1)


# empty_list = [], list()

####################
vehicles = ["car", "bike", "bus", 10, 1.2, False]
vehicle = 466
print(vehicle)
vehicle = 999
print(vehicle)

for vehicle in vehicles:
    print(vehicle, end="\t")
    # del vehicle
print(type(vehicle), end="\b")
print(123)

'''
for item in list_of_items:
    print(item)
'''




for num in range(15):
    print(num)
# range(n) --> 0 to n-1

for num in range(5, 20):
    print(num)
# range(start, stop) --> start to stop-1, step=1[default]
print("*"*30)
# range(start, stop, step) --> end value: stop-1
for num in range(0, 20, 2):
    print(num)
print("*"*30)
for i in range(-1, -20, -1):
    print(i)

print("*"*30)

for i in range(0, 20, -1):
    print(i)
# start, start+step, and so on.
'''
for i in 456:
   print(i)
'''


# generate a list of squares of natural numbers upto 25.

squares = []
for num in range(1, 26,1):
    square = num * num
    # square = num**2
    squares.append(square)
print(squares)

# print the list of characters in the string.
string1 = "python class"

chars = []
for char in string1:
    # print(char)
    chars.append(char)
print(chars)

#
print(list(string1))

# generate a list of squares of natural numbers upto 25.

squares = []
for num in range(1, 26,1):
    square = num * num
    # square = num**2
    squares.append(square)
print(squares)

# print the list of characters in the string.
string1 = "python class"

chars = []
for char in string1:
    # print(char)
    chars.append(char)
print(chars)

#
print(list(string1))

###############################


numbers = [0,1,2,3,4,5,6]

print(sum(numbers) / len(numbers))
print(min(numbers))
print(max(numbers))


numbers = [0,1,2,3,4,5,6]
# numbers = ["python", "classes"]
print(sum(numbers))
print(min(numbers))
print(max(numbers))

# program to take the sequence of numbers from the user and print their sum, minimum, maximum

numbers = (input("Enter the numbers: ").split(","))
print(numbers, type(numbers))

numbers_float = []
own_sum = 0
for number in numbers:
    own_sum += float(number)
    numbers_float.append(float(number))

print(sum(numbers_float))
print(own_sum)
print(min(numbers_float))
print(max(numbers_float))


# input("Enter the numbers: ") # str
#s.split(",") # list

strings = ["python", "classes", "complete", 45]
new_string = " fasdjkhfkjasd ".join(strings)
print(new_string, type(new_string))

###################

num1,num2,num3 = input("Enter the number").split(",")
num1 = 1234
num1_str = str(num1)
int(num1_str[0])


# List comprehension

# generate the squares of natural numbers, from 1 to 25

squares = []
for num in range(1,26):
    squares.append(num**2)
print(squares)


s2 = [num**2 for num in range(1,26)]

print(s2)

# List comprehension

num1,num2,num3 = [int(x) for x in input("Enter the number").split(",")]
print(num1, num2, num3, type(num1))


list1 = [1,2,37,56]
print(list1)
list1[0] = "r"
print(list1)

# tuple.

tuple1 = (1,2,37,56)
print(tuple1, type(tuple1))

#tuple1[0] = "r"
# print(tuple1)
# del tuple1[:]
# print(tuple1)
del tuple1
# print(tuple1)

string1 = "python"
string1[0] = "P"

print(string1)


# id()

list1 = [1,2,37,56]
list2 = list1[:]
list3 = list1
print(list1, id(list1))
print(list2, id(list2))
print(list3, id(list3))
'''
print(id(list1) == id(list3))
list1.append(78)
print(list1) # [1,2,37,56,78]
print(list2) # [1,2,37,56]
print(list3) # [1,2,37,56,78] [1,2,37,56]


list3.remove(2)
print(list1) # [1,37,56,78]
print(list2) # [1,2,37,56]
print(list3) # [1,37,56,78] [1,2,37,56]
'''

print(list1 is list3) # True
print(list1 == list3) # True
print(list1 == list2) # True
print(list1 is list2) # False

# var1 is var2, id(var1) == id(var2)

int1_ = 1,2,3
print(int1_, type(int1_))

var1 = 2,3, # valid tuple.
print(var1, type(var1))

var2 = 56, # valid
print(var2, type(var2))

print(len(var2))

#############################

# help(enumerate)
#
string = "Python class"

for char in string:
    print(char, end="\t")

print()

for index, char in enumerate(string):
    print(index, char)


list_of_values = [1,5,6,"python", 1.2, True, 89]
for i, value in enumerate(list_of_values):
    print(f"The value at the index {i} in the list is {value}")

for val in enumerate(list_of_values):
    print(val, type(val))
    print(f"The value at the index {val[0]} in the list is {val[1]}")


# input the number from the user,

number = int(input("Enter the number"))
'''
while condition_is_true:
    loop_body


for x in sequence:
    loop_body
'''

while number != 10:
    number = int(input("Enter the number"))

print("You've entered the desired number")


# input the number from the user, print the natural numbers upto the entered number.

number = int(input("Enter the number"))
'''
while condition_is_true:
    loop_body


for x in sequence:
    loop_body
'''

x = 1
while x <= number:
    print(x)
    x += 1
print("ended the program")

while x <= number:
    print(x)

while True:
    print("Hello" )
# Ctrl + C to interrupt the execution.

#####################################

string1 = "python class"
print(dir(string1))

print(string1.capitalize())
print(type(string1.capitalize()))


# count the number of particular character
print(string1.count('s'))
print(string1.count('p', 4))
print(string1.count('s', 4, 8))
print(string1.count('S'))

print(string1.endswith('class'))

print("Starting with : ", string1.startswith('class'))
print("Starting with : ", string1.startswith('py'))

print(string1.find('py')) # index if it is present.
print(string1.find('12')) # -1 if it is not present.

print(string1.index('cl')) # index if it is present.
# print(string1.index('135')) #  ValueError.


string1 = "    pythoN class       "
print(string1.strip())
print(string1.rstrip())
print(string1.lstrip())

print(string1.upper())
print(string1.lower())



number = 8568
cur_pos = 0
total_even = 0
total_odd = 0
num_str = str(number)
l = len(num_str)
while(cur_pos < l):
    print(cur_pos, num_str[cur_pos], number)
    pos_value = number % 10
    number //= 10
    if cur_pos % 2 == 0:
        total_odd += pos_value
    else:
        total_even += pos_value

    cur_pos +=1

print(total_even, total_odd)
#######################

# Transfer statements
# break, continue, pass

list_of_numbers = [1,5,2,4,2,8,6,4]
search = 2

'''
if search in list_of_numbers:
    print(search, "is present in the list")

'''

for number in list_of_numbers:
    if number == search:
        print(search, "is present in the list")
        break

cart = [100,-100,56,23,47, -56]

for price in cart:
    if price < 0:
        print("Negative price item should not be present")
        break
    else:
        print("Item is processing")


numbers = [10,20,30,0,50,45,56,78,89]

for number in numbers:

    if number == 0:
        print("the division with zero is not possible")
        print("Further processing with this number is not possible")
        continue
    print(100/number)


# Transfer statements
# break, continue, pass

numbers = [10,20,30,0,50,45,56,78,89]


for number in numbers:
    # TODO.
    pass


for number in numbers:
    # TODO.
    print("number == 56", number == 56)
    pass
    print( "number == 20",number == 20)


if 5>2:
   # TODO print condition true;
   pass

pass
pass
pass
pass
print("End of the program")


numbers = [10,20,30,0,50,45,56,78,89]

for number in numbers:
    # TODO.
    print("number == 56", number == 56)
    continue
    print( "number == 20",number == 20)

#####################################

# get the unique values of the list
list_of_numbers = [1.5,5,8,3,65,78,12,5,8,65,100,100]

unique = []

for num in list_of_numbers:
    if num not in unique:
        unique.append(num)
print(unique)


# get the unique values of the string
string = "asbcasfhajkdqwuyqw"

unique = []

for char in string:
    if char not in unique:
        unique.append(char)
print(unique, "".join(unique))

# get the unique values of the list
list_of_strings = ["a", "a", "b", "a"]

unique = []

for char in list_of_strings:
    if char not in unique:
        unique.append(char)
print(unique, "".join(unique))



# get the unique values of the list
list_of_strings = ["a", "a", "b", "a"]
unique = set(list_of_strings)
print(unique)

set_of_numbers = {1,5,56,74,89,74,1,56}
print(set_of_numbers)

'''
[] list()
() tuple()
'''

empty_set = set()
# empty_set = {}
print(empty_set, type(empty_set), id(empty_set))

empty_set.add(45)
empty_set.add(89)
empty_set.add(45)
empty_set.add(45)
empty_set.add(78)
print(empty_set, id(empty_set))

print(45 in empty_set)

print(dir(empty_set))

###################
# PRACTICE
Write a program to validate the ip address.
0-255.0-255.0-255.0-255

#######################

#

numbers = [1,2,3,3,7,5,8,9]
a = set(numbers)
b = list(a)
print(type(a), a, b)

#

numbers = [1,2,3,3,7,5,8,9]
a = set(numbers)
a.add(56)
a.add(56)
a.add(23)

a.update([78,45,12,45])

print(a)

b = a.copy()
print(id(a), id(b))
b.add(100)
print(a)
print(b)

a.remove(3)
print(a)
print(b)

a.discard(5)
print(a)

a.discard(500)
print(a)

# print(a[0]) # TypeError: 'set' object does not support indexing

w = a.pop()
print(w)
print(a)

# a.remove(500)
# print(a)

a.clear()
print(a)

# 2,4,6,8,...20
# ..30

two_multiples = set(range(0,22,2))
print(two_multiples, type(two_multiples))
three_multiples = set(range(0,33,3))
print(three_multiples)

union_two_three = two_multiples.union(three_multiples)
print(union_two_three)

intersection_two_three = two_multiples.intersection(three_multiples)
print(intersection_two_three)

print(two_multiples.difference(three_multiples))

print(three_multiples.difference(two_multiples))

##########################
PRACTICE

# OTP one time password
# Create a set of 4 digit numbers.
# Generate 10 one time password of 4 digits.

# Understand and execute the codes Code 1 and Code 2, and summarise its functionality in english words.

# Code 1:
idx_list = [idx+1 for idx,val in enumerate(test_list) if val.lstrip() == value]
split_list = []
i = 0
for idx in idx_list:
    split_list.append(test_list[i:idx])
    i = idx
print(split_list)


# Code 2:
f = [val for val in test_list if val not in values]
print(f)

#####################
# Dictionary

# set()
details = {}
print(type(details))

details['name'] = 'Shashidhar'
details["laptop"] = 'DELL'
details[56] = 45
print(details)


details_1 = {'name':'Shashi', 'laptop':'Dell'}
# details[key_name]
print(details_1)
details_1['laptop'] = 'Lenovo'

print(details_1)

print(details_1['name'])
print(type(details_1['name']))
print(details_1['name'][2])

# print(details_1['name_']) # KeyError: 'name_'
print('name_' in details_1)
if 'name_' in details_1:
    print(details_1['name_'])
else:
    print('name_ is not found')

details_1['name'] = ""
print(details_1)

del details_1['name']
print(details_1)

details_1.clear()
print(details_1)

# del details_1

# [0]
# values can be anything.
# key: immutable.

'''
new_dict = {[1,2]: 'Error'} # TypeError: unhashable type: 'list'
print(new_dict) #

new_dict = {{1:'one'}:'ONE'}
print(new_dict) # TypeError: unhashable type: 'dict'

'''

details_1 = {'name':'Shashi', 'laptop':'Dell'}

print(details_1.keys())

for key in details_1.keys():
    print(key, details_1[key])

print(details_1.values())

for key,value in details_1.items():
    print(key,value)

details_2 = {'laptop':'Lenovo', 'mobile':'Android'}
'''
details_1.update(details_2)
print(details_1)
'''

details_2.update(details_1)
print(details_2)

#####################

details_1 = {'name':'Shashi', 'laptop':'Dell'}

print(details_1.popitem())
# print(type(details_1.popitem()))

stored_value = details_1.popitem() # ('laptop', 'Dell')
new = dict()
new[stored_value[0]] = stored_value[1]
print(new)

# details_1 = {}
if len(details_1) > 0:
    print(details_1.popitem())


#
details_1 = {'name':'Shashi', 'laptop':'Dell'}

print(details_1['name'])
print(details_1.get('name56'))

# None

print(details_1.get('name56') == None)

if None:
   # None is no value, so this block will not be executed
   pass


print(details_1.get('name56', "Default Value"))
print(details_1.get('name', "Default Value"))

# details_1["name"]


print(id(print(print("Hello"))))
a = print("hi")
print(type(a))
print(id(a))


# Count the occurrences of vowels, consonant present in the given string

string1 = "Shashi"
vowels = {'a', 'e', 'i', 'o', 'u'}

vowel_count = {}
consonant_count = {}

for char in string1:
    char = char.lower()
    if char in vowels:
        vowel_count[char] = vowel_count.get(char, 0) + 1
    else:
        consonant_count[char] = consonant_count.get(char, 0) + 1

print(vowel_count)

print(consonant_count)

#####################

# Nested loops.

c = 0
for i in range(10): # outer loop
    for j in range(5): # inner loop
        print(i, j)
        for k in range(3):
            c += 1
            print("The value of k is ", k, c)

# Nested loops.

for i in range(10): # outer loop

    # outer loop body
    for j in range(5): # inner loop
        # inner loop body
        print(i, j)

    # outer loop body
    print("This is from outer loop: ", i,j)

    # outer loop body
    for j in range(5): # inner loop
        # inner loop body
        print('This is from inner loop 2: ', i, j)

# Nested loops.

for i in range(10): # outer loop

    # outer loop body
    for j in range(5): # inner loop
        # inner loop body
        print(i, j)

        if j > 2:
            break

    if i > 7:
        break

# Nested loops.

for i in range(10): # outer loop

    if i > 3:
        continue

    # outer loop body
    for j in range(5): # inner loop
        if j < 2:
            continue
        # inner loop body
        print(i, j)


# Nested list/tuple.

numbers = [[1,2,3], [5,8,3,1,3,7], (5,6,1,78,56,12,45), 45, 2.5]

# find the sum of all these numbers.
total_sum = 0
total_numbers = []

for i in numbers:
    print(i, type(i))
    if (type(i) == int) or (type(i) == float):
        total_numbers.append(i)
        total_sum += i
    else:
        for j in i:
            if (type(j) == int) or (type(j) == float):
                total_sum += j
                total_numbers.append(j)

print(total_sum)
print(total_numbers)

print(sum(total_numbers))


numbers = [[1,2,3, [5,89,1.2,6.8], {4:56}], "string abcd", [5,8,3,1,3,7], (5,6,1,78,56,12,45), 45, 2.5]
#####################

# for, while loop

numbers = [1,2,8,12,45,65,1.2]

for i in numbers:
    print(i)
    if i > 5:
        # continue
    # print("The value of i is ", i)
        break
# 1,2,8
else:
    print("This is the else block of for loop")
print("*"*30)
number = 0
while number < 5:
    print(numbers[number])
    if number == 3:
        break
    number += 1
else:
    print("This is the else block of while loop")

print("End of  the program")

'''
if 5 > 0:
    print("Hello 5 > 0")
#     break
    # continue
else:
    print("5 > 0 is false")
'''
####################
# functions
'''
inbuilt functions
print()
sum()
max()
'''

# for better reusability and readability.

'''
def function_name(arguments, keyword_arguments):
    function_body
'''

print("Hello Good morning", sep='\t', end='abcd')

print("Hello Good morning")

print("Hello Good morning")


def print_hi(name):
    print("Hello " , name)

print_hi("Shashi")
print_hi("Harishad")




def ip_address(ip_str):
    input = ip_str.split('.')
    if len(input)!=4:
        print("Not a valid IP address. Please enter 4 values separated by dot")
    else:
        for entry in input:
            print("I've changed the function.")
            if entry.isdigit():
                entry=int(entry)
                if entry >=0 and entry <=255:
                    continue
                else:
                    print(entry, "is not in a valid range. Please enter only 0-255")
                break
            else:
                print(entry, "is not an interger. Please use integers only")


ip_address("255.266.253.248")
ip_address("285.266.253.248")

print("I'm validating the ip address")
for i in range(10):
    print(i)

ip_address("255.216.253.218")

ip_address("a.b.c.d")
# TypeError: ip_address() missing 1 required positional argument: 'ip_str'



def print_hi(name="Default Value"):
    print("Hello " , name)
    return
    print("This below code will not be executed")
    return "hey good morning"


a = print_hi("Shashi")
print(a)

'''
print_hi("Harishad")
print_hi()

print(print_hi())
'''


def is_even(number):
    if type(number) == int:
        return number%2 == 0
    else:
        return False

print(is_even(50))
print(is_even(53))
print(is_even("50"))


if is_even(4):
    print(4, ' is a even number')

if is_even(5):
    print(5, ' is a even number')

# all the function names should follow the rules
# which are applicable for naming the variable.
# give function names based on what the function is actually doing.

'''
def function_name(arguments, keyword_arguments):
    function_body
	return object # optional
'''

# for better code reusability and readability.

###########################
def function_name(args, keyword_arguments):
    """
    function documentation.
    arg1: type[any]

    returns int.
    """
    function_body
    return value


# write a function which will print the square of the given number.

def square_num(number):
    """
    This function prints the square of the given number.
    number: int,float.
    return None.
    """
    print(f"The square of {number} is {number**2}")
    return None

input_number = input("Enter the number")
square_num(float(input_number))



def sub_number_2(num1=0, num2):
    """
    def sub_number_2(num1=0, num2):
                        ^
    SyntaxError: non-default argument follows default argument
    """
    return num1 - num2
print(sub_number_2(5))


# write a function which will take two numbers as arguments
# and return their sum.

def add_numbers(num1, num2):
    return num1 + num2

# num1 = 25
# num2 = 56

# print(add_numbers(num1, num2))
# print(add_numbers(num1)) # TypeError: add_numbers() missing 1
# required positional argument: 'num2'



num1 = 25
num2 = 56

def sub_number(num1, num2):
    return num1 - num2

print(sub_number(num1, num2))
print(sub_number(num2, num1)) # sub_number(56, 25)


def sub_number_1(num1, num2=0):
    return num1 - num2

print(sub_number_1(num1, num2))
print(sub_number_1(num2, num1)) # sub_number(56, 25)
print(sub_number_1(num1)) # sub_number_1(25, 0)



def all_default_value(num1=0, num2=0):
   print(f"The values of num1 {num1} and num2 {num2}", num1*num2)

all_default_value(5, 10)
all_default_value(5)
all_default_value(num1= 5)
all_default_value(num2= 5)
# all_default_value(num1= 5, 20) #            ^
# SyntaxError: positional argument follows keyword argument

all_default_value(num2= 5, num1= 20)

# positional argument
# keyword argument
# default argument.
# ----------------------
# variable length arguments.

# TASK:
# convert the electricity bill assignment into the function and
# return the values in the dictionary format.

###########################


# variable length arguments

def sum_of_numbers(*numbers):
    print(numbers)
    print(type(numbers)) # tuple.
    return sum(numbers)
    
sum1 = sum_of_numbers(11,12,45,79)
sum2 = sum_of_numbers(11)
sum3 = sum_of_numbers(11, 89)
total_sum = sum_of_numbers(sum1, sum2, sum3)

print("Total sum is ", total_sum)


# variable length arguments

def sum_of_numbers(*numbers):
    print(numbers)
    print(type(numbers)) # tuple.
    
    return numbers[0]
    
sum1 = sum_of_numbers(51,12,45,79)
sum2 = sum_of_numbers(11)
sum3 = sum_of_numbers(11, 89)
total_sum = sum_of_numbers(sum1, sum2, sum3)

print("Total sum is ", total_sum)


# variable length arguments

def sum_of_numbers(fixed_number, *numbers):
    print(numbers)
    print(type(numbers)) # tuple.
    if len(numbers) > 0:
        return fixed_number + numbers[0]
    else:
        return fixed_number
    
sum1 = sum_of_numbers(51,12,45,79) # 51+12 = 63
sum2 = sum_of_numbers(11) # 11 
sum3 = sum_of_numbers(11, 89) # 11+89 100
total_sum = sum_of_numbers(sum1, sum2, sum3)

print("Total sum is ", total_sum)

# variable length arguments

def sum_of_numbers(*numbers, fixed_number):
    print(numbers)
    print(type(numbers)) # tuple.
    if len(numbers) > 0:
        return fixed_number + numbers[0]
    else:
        return fixed_number
    
sum1 = sum_of_numbers(51,12,45,79, fixed_number=85) # 85+51 = 136
sum2 = sum_of_numbers(11, fixed_number= 45) # 45+11 = 56
sum3 = sum_of_numbers(11, 89, fixed_number=12) # 12+11 = 23
total_sum = sum_of_numbers(sum1, sum2, fixed_number=sum3) 
# 23+136 = 159

print("Total sum is ", total_sum)


# sum in built function. 
# override the inbuilt function. 

def sum_(*args):
    total = 0
    for num in args:
        total += num
    return total - 100
'''
Traceback (most recent call last):
  File "26.py", line 10, in <module>
    print(sum(56, 12))
TypeError: 'int' object is not iterable
'''

print(sum((56, 12)))
print(sum((45, 56, 12)))
print(sum_(56, 12))
#########################################
